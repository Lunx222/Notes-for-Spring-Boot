事件(Application Event)
=
使用事件的时候涉及三个对象：
####1 消息（Message）
```
import org.springframework.context.ApplicationEvent;
public class DemoEvent extends ApplicationEvent{
    private static final long serialVersionUID = 1L;
    private String msg;
    public DemoEvent(Object source,String msg) {
        super(source);  //父类构造函数需要传进publisher对象
        this.msg = msg;
    }
    public String getMsg() {
    return msg;
    }
    public void setMsg(String msg) {
        this.msg = msg;
    }
}
```
####2 事件监听器（ApplicationListener）
```
import org.springframework.context.ApplicationListener;
import org.springframework.stereotype.Component;
@Component
public class DemoListener implements ApplicationListener<DemoEvent> {
    public void onApplicationEvent(DemoEvent event) {
    }
}
```
####3 事件发布者（Publisher）
```
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;
@Component
public class DemoPublisher {
    @Autowired
    ApplicationContext applicationContext; 
    public void publish(String msg){
        applicationContext.publishEvent(new DemoEvent(this, msg)); 
    }
}
```
在主函数中调用发布者发布消息，监听器就可以自动接收消息并触发相应事件